{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","handleChange","className","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundary","props","state","hasError","error","info","this","setState","Component","App","loading","searchValue","value","target","RegExp","fetch","then","res","json","users","filteredRobots","filter","name","test","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAceA,EAXE,SAAC,GAAe,EAAbC,OAClB,MAAM,IAAIC,MAAM,UCSHC,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OAChB,yBAAKC,UAAU,OACb,2BACEA,UAAU,oCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCEDK,EARA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,yBACEC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAEhEJ,ICoBUK,E,YAvBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CACZJ,UAAU,M,+BAIJ,IACAA,EAAaG,KAAKJ,MAAlBC,SACAR,EAAaW,KAAKL,MAAlBN,SACR,OAAIQ,EACK,uDAEFR,M,GApBiBa,aCmDbC,G,iNA7CbP,MAAQ,CACNQ,SAAS,EACTxB,OAAQ,GACRyB,YAAa,Q,EAcftB,aAAe,YAA4B,IAAfuB,EAAc,EAAxBC,OAAUD,MAC1B,EAAKL,SAAS,CACZI,YAAa,IAAIG,OAAOF,EAAO,Q,mFAbd,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OACT,EAAKZ,SAAS,CACZrB,OAAQiC,EACRT,SAAS,S,+BAWP,IAAD,EACkCJ,KAAKJ,MAAtChB,EADD,EACCA,OAAQwB,EADT,EACSA,QAASC,EADlB,EACkBA,YACnBS,EAAiBlC,EAAOmC,QAAO,gBAAGC,EAAH,EAAGA,KAAH,OAAcX,EAAYY,KAAKD,MACpE,OACE,yBAAKhC,UAAU,MACZoB,EACC,wBAAIpB,UAAU,MAAd,WAEA,kBAAC,WAAD,KACE,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAciB,KAAKjB,eAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUH,OAAQkC,Y,GArChBZ,c,MCKEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.3bd66f42.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  throw new Error(\"NOOO!\");\n  return (\n    <Fragment>\n      {robots.map(({ id, name, email }, index) => (\n        <Card key={index} id={id} name={name} email={email} />\n      ))}\n    </Fragment>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ handleChange }) => (\n  <div className=\"pa2\">\n    <input\n      className=\"pa3 ba b--green bg-lightest-blue \"\n      type=\"search\"\n      placeholder=\"Search Robots\"\n      onChange={handleChange}\n    />\n  </div>\n);\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = ({ children }) => (\n  <div\n    style={{ overflowY: \"scroll\", border: \"1px solid black\", height: \"500px\" }}\n  >\n    {children}\n  </div>\n);\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true\n    });\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n    if (hasError) {\n      return <h1>Oops! An Error Occured!</h1>;\n    }\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component, Fragment } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    loading: true,\n    robots: [],\n    searchValue: /.*?/i\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(users =>\n        this.setState({\n          robots: users,\n          loading: false\n        })\n      );\n  }\n\n  handleChange = ({ target: { value } }) => {\n    this.setState({\n      searchValue: new RegExp(value, \"i\")\n    });\n  };\n\n  render() {\n    const { robots, loading, searchValue } = this.state;\n    const filteredRobots = robots.filter(({ name }) => searchValue.test(name));\n    return (\n      <div className=\"tc\">\n        {loading ? (\n          <h1 className=\"f2\">Loading</h1>\n        ) : (\n          <Fragment>\n            <h1 className=\"f2\">RoboFriends</h1>\n            <SearchBox handleChange={this.handleChange} />\n            <Scroll>\n              <ErrorBoundary>\n                <CardList robots={filteredRobots} />\n              </ErrorBoundary>\n            </Scroll>\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}